#ifndef BINDINGS_H
#define BINDINGS_H

#include "lua.h"
#include "lauxlib.h"
#include "lualib.h"

#include "LuaBridge/LuaBridge.h"

/*[[[cog
import json
import cog

def read_all(file_path: str):
    with open(file_path, 'r') as f:
        return f.read()

meta = json.loads(read_all(class_meta_path))
]]]*/
//[[[end]]]


/*[[[cog
includes = set(c['headerPath'] for c in meta)
for include in includes:
    cog.outl(f'#include "{include}"')
]]]*/
//[[[end]]]


// Expand templated classes with all known templates args 

// filter class by white list?

// Remove classes with custom types (not standard, like *int*_t, string, size_t, etc) 
// in arguments/fields/returns (Like a CanvasStrip with strip_mode_t arg)

lua_State* bindings_new_state() {
    lua_State* state luaL_newstate();
    luaL_openlibs(luaState);

    // Generate binding code & apply it to state

    // Add Info about available classes/funcs/vars to lua

    return state;
}

#endif // BINDINGS_H
